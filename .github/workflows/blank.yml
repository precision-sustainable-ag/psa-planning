name: Add Issue to Project
# This workflow runs whenever a new issue is opened in the repository.
on:
  issues:
    types:
      - opened

jobs:
  track_issue:
    runs-on: ubuntu-latest
    steps:
      - name: Generate token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          
      - name: Get project data
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
          ORGANIZATION: precision-sustainable-ag
          PROJECT_NUMBER: 5
        run: |
          gh api graphql -f query='
            query($org: String!, $number: Int!) {
              organization(login: $org) {
                projectV2(number: $number) {
                  id
                  fields(first: 20) {
                    nodes {
                      ... on ProjectV2Field {
                        id
                        name
                      }
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }' -f org=$ORGANIZATION -F number=$PROJECT_NUMBER > project_data.json
          echo 'PROJECT_ID='$(jq -r '.data.organization.projectV2.id' project_data.json) >> $GITHUB_ENV
          echo 'TEAM_FIELD_ID='$(jq -r '.data.organization.projectV2.fields.nodes[] | select(.name== "Team") | .id' project_data.json) >> $GITHUB_ENV
          echo 'PROJECT_FIELD_ID='$(jq -r '.data.organization.projectV2.fields.nodes[] | select(.name== "Project") | .id' project_data.json) >> $GITHUB_ENV
          
      - name: Add Issue to project
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
          ISSUE_ID: ${{ github.event.issue.node_id }}
        run: |
          item_id=$(gh api graphql -f query='
            mutation($project: ID!, $issue: ID!) {
              addProjectV2ItemById(input: {projectId: $project, contentId: $issue}) {
                item {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f issue=$ISSUE_ID --jq '.data.addProjectV2ItemById.item.id')
          echo "ITEM_ID=$item_id" >> $GITHUB_ENV

      - name: Set fields based on labels
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
          LABELS_JSON: ${{ toJson(github.event.issue.labels) }}
        run: |
          # Extract the 'Team' label
          TEAM_LABEL=$(echo "$LABELS_JSON" | jq -r '.[] | select(.name | startswith("team: ")) | .name' | cut -d ' ' -f2-)
          
          # Extract the 'Project' label
          PROJECT_LABEL=$(echo "$LABELS_JSON" | jq -r '.[] | select(.name | startswith("project: ")) | .name' | cut -d ' ' -f2-)
      
          if [ -n "$TEAM_LABEL" ]; then
            TEAM_OPTION_ID=$(jq -r --arg label "$TEAM_LABEL" '.data.organization.projectV2.fields.nodes[] | select(.name == "Team") | .options[] | select(.name == $label) | .id' project_data.json)
            gh api graphql -f query='
              mutation($project: ID!, $item: ID!, $field: ID!, $value: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $project
                  itemId: $item
                  fieldId: $field
                  value: { singleSelectOptionId: $value }
                }) {
                  projectV2Item { id }
                }
              }' -f project=$PROJECT_ID -f item=$ITEM_ID -f field=$TEAM_FIELD_ID -f value=$TEAM_OPTION_ID
          fi
      
          if [ -n "$PROJECT_LABEL" ]; then
            PROJECT_OPTION_ID=$(jq -r --arg label "$PROJECT_LABEL" '.data.organization.projectV2.fields.nodes[] | select(.name == "Project") | .options[] | select(.name == $label) | .id' project_data.json)
            gh api graphql -f query='
              mutation($project: ID!, $item: ID!, $field: ID!, $value: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $project
                  itemId: $item
                  fieldId: $field
                  value: { singleSelectOptionId: $value }
                }) {
                  projectV2Item { id }
                }
              }' -f project=$PROJECT_ID -f item=$ITEM_ID -f field=$PROJECT_FIELD_ID -f value=$PROJECT_OPTION_ID
          fi
